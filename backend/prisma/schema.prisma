generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId        String                  @id @default(uuid())
  name          String                  @db.VarChar(100)
  email         String                  @unique(map: "email_UNIQUE") @db.VarChar(100)
  phone         String?                 @db.VarChar(20)
  role          Role
  passwordHash  String                  @db.VarChar(255)
  locationId    String?
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt
  location      Location?               @relation(fields: [locationId], references: [locationId], onDelete: SetNull)
  notifications NotificationRecipient[]
  logs          Log[]
}

model Location {
  locationId     String          @id @default(uuid())
  name           String          @unique @db.VarChar(100)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  users          User[]
  devices        Device[]
  configurations Configuration[]
}

enum Role {
  ADMIN
  GARDENER
  INACTIVE
}

model Notification {
  notificationId String                  @id @default(uuid())
  senderId       String?                 @db.VarChar(36)
  message        String
  severity       Severity
  createdAt      DateTime                @default(now())
  recipients     NotificationRecipient[]
}

model NotificationRecipient {
  notificationId String
  userId         String
  isRead         Boolean      @default(false)
  notification   Notification @relation(fields: [notificationId], references: [notificationId], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@id([notificationId, userId])
}

enum Severity {
  INFO
  WARNING
  ERROR
}

model Configuration {
  configId        String           @id @default(uuid())
  name            String           @unique @db.VarChar(100)
  value           Float
  locationId      String
  deviceType      DeviceType
  lastUpdated     DateTime         @updatedAt
  location        Location         @relation(fields: [locationId], references: [locationId], onDelete: Cascade)
  moistureSensors MoistureSensor[]
  dht20SensorsMin DHT20Sensor[]    @relation(name: "TempMin")
  dht20SensorsMax DHT20Sensor[]    @relation(name: "TempMax")
  dht20SensorsHum DHT20Sensor[]    @relation(name: "HumidityThreshold")
  // pumps           Pump[]
}

model Device {
  deviceId       String          @id @default(uuid())
  name           String          @unique @db.VarChar(100)
  status         DeviceStatus
  type           DeviceType
  locationId     String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  location       Location?       @relation(fields: [locationId], references: [locationId], onDelete: SetNull)
  moistureSensor MoistureSensor?
  dht20Sensor    DHT20Sensor?
  pump           Pump?
  logs           Log[]
  fan            Fan?
  Schedule       Schedule[]
}

enum DeviceStatus {
  ACTIVE
  INACTIVE
}

enum DeviceType {
  PUMP
  MOISTURE_SENSOR
  DHT20_SENSOR
  LCD
  FAN
  LED
}

model MoistureSensor {
  sensorId        String           @id
  // calibrationValue Float?
  thresholdId     String
  // lastCalibrated   DateTime         @default(now())
  device          Device           @relation(fields: [sensorId], references: [deviceId], onDelete: Cascade)
  threshold       Configuration    @relation(fields: [thresholdId], references: [configId], onDelete: Restrict)
  moistureRecords MoistureRecord[]
}

model DHT20Sensor {
  sensorId            String        @id
  tempMinId           String
  tempMaxId           String
  humidityThresholdId String
  device              Device        @relation(fields: [sensorId], references: [deviceId], onDelete: Cascade)
  temperatureMin      Configuration @relation(name: "TempMin", fields: [tempMinId], references: [configId], onDelete: Restrict)
  temperatureMax      Configuration @relation(name: "TempMax", fields: [tempMaxId], references: [configId], onDelete: Restrict)
  humidityThreshold   Configuration @relation(name: "HumidityThreshold", fields: [humidityThresholdId], references: [configId], onDelete: Restrict)
  dht20Records        DHT20Record[]
}

model Pump {
  pumpId       String   @id
  isRunning    Boolean  @default(false)
  mode         Mode     @default(AUTO)
  // maxRuntimeId        String
  lastServiced DateTime @default(now())
  device       Device   @relation(fields: [pumpId], references: [deviceId], onDelete: Cascade)
  // maxRuntime          Configuration        @relation(fields: [maxRuntimeId], references: [configId], onDelete: Restrict)
  // waterUsages         WaterUsage[]
  // irrigationSchedules IrrigationSchedule[]
}

model Fan {
  fanId        String   @id @default(uuid())
  isRunning    Boolean  @default(false)
  mode         Mode     @default(AUTO)
  // maxRuntimeId String
  speed        Float
  lastServiced DateTime @default(now())
  device       Device   @relation(fields: [fanId], references: [deviceId], onDelete: Cascade)
  // maxRuntime   Configuration @relation(fields: [maxRuntimeId], references: [configId], onDelete: Restrict)
}

enum Mode {
  MANUAL
  AUTO
  SCHEDULED
}

model MoistureRecord {
  moistureRecordId String         @id @default(uuid())
  sensorId         String
  timestamp        DateTime       @default(now())
  soilMoisture     Float
  sensor           MoistureSensor @relation(fields: [sensorId], references: [sensorId], onDelete: Cascade)
}

model DHT20Record {
  dht20RecordId String      @id @default(uuid())
  sensorId      String
  timestamp     DateTime    @default(now())
  temperature   Float
  humidity      Float
  sensor        DHT20Sensor @relation(fields: [sensorId], references: [sensorId], onDelete: Cascade)
}

model Schedule {
  scheduleId String   @id @default(uuid())
  deviceId   String
  startTime  DateTime
  endTime    DateTime
  repeatDays Int      @default(0) // Bitmask lưu ngày trong tuần (CN-T7)
  isActive   Boolean  @default(true)
  device     Device   @relation(fields: [deviceId], references: [deviceId], onDelete: Cascade)
}

model Log {
  logId       String   @id @default(uuid())
  userId      String?
  deviceId    String?
  eventType   Severity
  description String
  createdAt   DateTime @default(now())
  user        User?    @relation(fields: [userId], references: [userId], onDelete: SetNull)
  device      Device?  @relation(fields: [deviceId], references: [deviceId], onDelete: SetNull)
}

// // Meta (chưa triển khai)
// model AIDecisionLog {
//   logId        String    @id @default(uuid())
//   timestamp    DateTime  @default(now())
//   locationId     String
  
//   soilMoisture Float?
//   temperature  Float?
//   humidity     Float?
//   configSnapshot Json?  

//   decisionAction String  
//   decisionDuration Int     
//   reason         String? 

//   executionStatus String?  
//   executionNotes  String?   

// }


// model TrainingData {
//   dataId       String   @id @default(uuid())
//   timestamp    DateTime
//   deviceId     String

//   soilMoisture Float
//   temperature  Float
//   humidity     Float

//   targetAction String 
//   targetDuration Int   

//   dataSource   String  
//   processedAt  DateTime @default(now())
//   modelVersion String? 
// }