generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId       String   @id @default(uuid()) @db.VarChar(36)
  name         String   @db.VarChar(100)
  email        String   @unique(map: "email_UNIQUE") @db.VarChar(100)
  phone        String?  @db.VarChar(20)
  address      String?  @db.VarChar(255)
  role         Role
  passwordHash String   @db.VarChar(255)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  notifications Notification[]
  logs          Log[]
}

enum Role {
  ADMIN
  GARDENER
  INACTIVE
}

model Notification {
  notificationId  String   @id @default(uuid())
  recipientUserId String
  message         String
  severity        Severity
  isRead          Boolean  @default(false)
  timestamp       DateTime @default(now())

  recipientUser User @relation(fields: [recipientUserId], references: [userId], onDelete: Cascade)
}

enum Severity {
  Info
  Warning
  Error
}

model Configuration {
  configId    String   @id @default(uuid())
  name        String   @db.VarChar(100)
  value       Float
  location    String   @db.VarChar(100)
  lastUpdated DateTime @updatedAt
}

model Device {
  deviceId    String       @id @default(uuid())
  name        String       @db.VarChar(100)
  status      DeviceStatus
  type        DeviceType
  location    String
  lastUpdated DateTime     @updatedAt

  moistureSensor MoistureSensor?
  dht20Sensor    DHT20Sensor?
  pump           Pump?
  logs           Log[]
  commandQueue   CommandQueue[]
}

enum DeviceStatus {
  Active
  Inactive
}

enum DeviceType {
  Pump
  MoistureSensor
  DHT20Sensor
  LCD
  Relay
}

model MoistureSensor {
  sensorId         String    @id
  calibrationValue Float?
  threshold        Float
  soilType         SoilType?
  lastCalibrated   DateTime  @default(now())

  device          Device           @relation(fields: [sensorId], references: [deviceId], onDelete: Cascade)
  moistureRecords MoistureRecord[]
}

enum SoilType {
  Cat
  Set
  Mun
  Dat_thit
}

model DHT20Sensor {
  sensorId            String       @id
  temperatureRangeMin Float
  temperatureRangeMax Float
  humidityAccuracy    Float
  locationType        LocationType

  device       Device        @relation(fields: [sensorId], references: [deviceId], onDelete: Cascade)
  dht20Records DHT20Record[]
}

enum LocationType {
  Trong_nha
  Ngoai_troi
}

model Pump {
  pumpId            String   @id
  isRunning         Boolean  @default(false)
  autoMode          Boolean  @default(false)
  maxRuntime        Int
  flowRate          Float
  pressure          Float
  energyConsumption Float
  lastServiced      DateTime @default(now())

  device              Device               @relation(fields: [pumpId], references: [deviceId], onDelete: Cascade)
  waterUsages         WaterUsage[]
  irrigationSchedules IrrigationSchedule[]
}

model MoistureRecord {
  moistureRecordId String   @id @default(uuid())
  sensorId         String
  timestamp        DateTime @default(now())
  soilMoisture     Float

  sensor MoistureSensor @relation(fields: [sensorId], references: [sensorId], onDelete: Cascade)
}

model DHT20Record {
  dht20RecordId String   @id @default(uuid())
  sensorId      String
  timestamp     DateTime @default(now())
  temperature   Float
  humidity      Float

  sensor DHT20Sensor @relation(fields: [sensorId], references: [sensorId], onDelete: Cascade)
}

model WaterUsage {
  usageId     String   @id @default(uuid())
  deviceId    String
  startTime   DateTime
  endTime     DateTime
  waterAmount Float

  pump Pump @relation(fields: [deviceId], references: [pumpId], onDelete: Cascade)
}

model IrrigationSchedule {
  scheduleId String   @id @default(uuid())
  deviceId   String
  startTime  DateTime
  endTime    DateTime
  repeatDays String   @db.VarChar(50)
  isActive   Boolean  @default(true)

  pump Pump @relation(fields: [deviceId], references: [pumpId], onDelete: Cascade)
}

model CommandQueue {
  commandId   String        @id @default(uuid())
  deviceId    String
  commandType CommandType
  status      CommandStatus @default(Dang_cho)
  timestamp   DateTime      @default(now())
  retryCount  Int           @default(0)

  device Device @relation(fields: [deviceId], references: [deviceId], onDelete: Cascade)
}

enum CommandType {
  Bat_bom
  Tat_bom
  Cap_nhat_cau_hinh
}

enum CommandStatus {
  Dang_cho
  Da_gui
  Thanh_cong
  That_bai
}

model Log {
  logId       String   @id @default(uuid())
  userId      String?
  deviceId    String?
  eventType   String   @db.VarChar(100)
  description String
  timestamp   DateTime @default(now())

  user   User?   @relation(fields: [userId], references: [userId], onDelete: SetNull)
  device Device? @relation(fields: [deviceId], references: [deviceId], onDelete: SetNull)
}
